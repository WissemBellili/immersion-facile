variables:
  SERVER_USER: deployer
  POSTGRES_DB: immersion-db
  POSTGRES_USER: immersion
  POSTGRES_PASSWORD: pg-password
  POSTGRES_PORT: 5432
  POSTGRES_HOST_AUTH_METHOD: trust
  PG_TEST_URL: postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:$POSTGRES_PORT/$POSTGRES_DB

stages:
  - test
  - deploy

image: node:16.5

cache:
  paths:
    - front/node_modules/
    - back/node_modules/

front:
  stage: test
  script:
    - cd front
    - npm ci
    - npm run includecheck
    - npm run test
    - npm run typecheck
    - npm run build

back:
  stage: test
  services:
    - name: postgis/postgis:13-master
      alias: postgres
  script:
    - cd back
    - npm ci
    - npm run includecheck
    - NODE_ENV=test npm run build-initial-db $PG_TEST_URL
    - PG_URL=$PG_TEST_URL npm run test:all
    - npm run typecheck

sonarqube-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "https://sonarqube.beta.pole-emploi.fr"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  script:
    - npm install typescript
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=immersion-facile -Dsonar.scm.disabled=true
  allow_failure: true
  only:
    - dev

deploy_on_dev:
  cache: []
  only:
    - dev
  image: alpine:latest
  stage: deploy
  environment:
    name: dev
  script:
    - chmod og= $DEPLOYER_ID_RSA_DEV
    - echo $SERVER_USER
    - apk update && apk add openssh-client
    - scp -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SECRETS $SERVER_USER@$DEPLOYER_SERVER_IP_DEV:/home/docker/immersion-facile-dev/.env.secrets
    - scp -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $VARIABLES $SERVER_USER@$DEPLOYER_SERVER_IP_DEV:/home/docker/immersion-facile-dev/.env.variables
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "cd /home/docker/immersion-facile-dev &&
      chmod 600 .env.secrets;
      chmod 600 .env.variables;

      git checkout dev &&
      git fetch &&
      git reset --hard origin/dev;
      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL:Source code fetch failed. Aborting.\";
      exit \$retVal;
      fi;

      touch .env &&
      chmod 600 .env &&
      cat .env.variables <(echo) .env.secrets <(echo) > .env &&
      rm -f .env.variables .env.secrets;

      docker-compose build &&
      docker-compose down &&
      docker-compose -f docker-compose.yml -f docker-compose.logging-loki-plugin.yml up -d;

      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL ERROR Docker image creation and server restart failed. Aborting.\";
      exit \$retVal;
      fi;

      sleep 60;
      echo \"Checking server health...\";
      curl --silent --fail --output /dev/null http://localhost:80/api/"

deploy_on_beta:
  cache: []
  only:
    - beta
  image: alpine:latest
  stage: deploy
  environment:
    name: beta
  script:
    - chmod og= $DEPLOYER_ID_RSA_DEV
    - echo $SERVER_USER
    - apk update && apk add openssh-client
    - scp -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SECRETS $SERVER_USER@$DEPLOYER_SERVER_IP_DEV:/home/docker/immersion-facile/.env.secrets
    - scp -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $VARIABLES $SERVER_USER@$DEPLOYER_SERVER_IP_DEV:/home/docker/immersion-facile/.env.variables
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "cd /home/docker/immersion-facile &&
      chmod 600 .env.secrets;
      chmod 600 .env.variables;

      git checkout beta &&
      git fetch &&
      git reset --hard origin/beta;
      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL:Source code fetch failed. Aborting.\";
      exit \$retVal;
      fi;

      touch .env &&
      chmod 600 .env &&
      cat .env.variables <(echo) .env.secrets <(echo) > .env &&
      rm -f .env.variables .env.secrets;

      docker-compose build &&
      docker-compose down &&
      docker-compose up -d;

      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL ERROR Docker image creation and server restart failed. Aborting.\";
      exit \$retVal;
      fi;

      sleep 60;
      echo \"Checking server health...\";
      curl --silent --fail --output /dev/null http://localhost:3100/api/"

deploy_on_staging:
  cache: []
  only:
    - staging
  image: alpine:latest
  stage: deploy
  environment:
    name: staging
  script:
    - chmod og= $DEPLOYER_ID_RSA_DEV
    - echo $SERVER_USER
    - apk update && apk add openssh-client
    - scp -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SECRETS $SERVER_USER@$DEPLOYER_SERVER_IP_DEV:/home/docker/immersion-facile-staging/.env.secrets
    - scp -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $VARIABLES $SERVER_USER@$DEPLOYER_SERVER_IP_DEV:/home/docker/immersion-facile-staging/.env.variables
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "cd /home/docker/immersion-facile-staging &&
      chmod 600 .env.secrets;
      chmod 600 .env.variables;

      git checkout staging &&
      git fetch &&
      git reset --hard origin/staging;
      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL:Source code fetch failed. Aborting.\";
      exit \$retVal;
      fi;

      touch .env &&
      chmod 600 .env &&
      cat .env.variables <(echo) .env.secrets <(echo) > .env &&
      rm -f .env.variables .env.secrets;

      docker-compose build &&
      docker-compose down &&
      docker-compose up -d;

      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL ERROR Docker image creation and server restart failed. Aborting.\";
      exit \$retVal;
      fi;

      sleep 60;
      echo \"Checking server health...\";
      curl --silent --fail --output /dev/null http://localhost:3100/api/"

deploy_on_prod:
  cache: []
  only:
    - main
  image: alpine:latest
  stage: deploy
  environment:
    name: prod
  script:
    - chmod og= $DEPLOYER_PRIVATE_KEY
    - echo $SERVER_USER
    - apk update && apk add openssh-client
    - scp -i $DEPLOYER_PRIVATE_KEY -o StrictHostKeyChecking=no $SECRETS $SERVER_USER@$DEPLOYER_SERVER_IP:/home/docker/immersion-facile/.env.secrets
    - scp -i $DEPLOYER_PRIVATE_KEY -o StrictHostKeyChecking=no $VARIABLES $SERVER_USER@$DEPLOYER_SERVER_IP:/home/docker/immersion-facile/.env.variables
    - ssh -i $DEPLOYER_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP "cd /home/docker/immersion-facile &&
      chmod 600 .env.secrets;
      chmod 600 .env.variables;

      git checkout main &&
      git fetch &&
      git reset --hard origin/main;
      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL:Source code fetch failed. Aborting.\";
      exit \$retVal;
      fi;

      touch .env &&
      chmod 600 .env &&
      cat .env.variables <(echo) .env.secrets <(echo) > .env &&
      rm -f .env.variables .env.secrets;

      docker-compose build &&
      docker-compose down &&
      docker-compose up -d;

      retVal=\$?;
      if [ \$retVal -ne 0 ]; then
      echo \"FATAL ERROR Docker image creation and server restart failed. Aborting.\";
      exit \$retVal;
      fi;

      sleep 60;
      echo \"Checking server health...\";
      curl --silent --fail --output /dev/null http://localhost:80/api/"
