variables:
  SERVER_USER: deployer

stages:
  - install
  - test
  - build
  - deploy
  - publish

image: node:16.5

cache:
  paths:
    - front/node_modules/
    - back/node_modules/

front:
  stage: test
  script:
    - cd front
    - npm ci
    - npm run test
    - npm run build

back:
  stage: test
  script:
    - cd back
    - npm install
    - npm ci
    - npm run test:all
    - npm run typecheck

sonarqube-check:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_TOKEN: "${SONAR_TOKEN}"
    SONAR_HOST_URL: "https://sonarqube.beta.pole-emploi.fr"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
    GIT_DEPTH: 0 # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  script:
    - npm install front back
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=immersion-facile
  allow_failure: true
  only:
    - dev

build_docker_image_back_job:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
     # build de l'image docker contenant l'API et le back end  et push de celles-ci dans le container registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR/back --dockerfile $CI_PROJECT_DIR/back/Dockerfile --destination ${CI_REGISTRY_IMAGE}/back:$CI_COMMIT_SHORT_SHA
  only:
    - branches

build_docker_image_front_job:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
     # build de l'image docker contenant le front end  et push de celle-ci dans le container registry
     - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
     - /kaniko/executor --context $CI_PROJECT_DIR/ --dockerfile $CI_PROJECT_DIR/Dockerfile --destination ${CI_REGISTRY_IMAGE}/front:$CI_COMMIT_SHORT_SHA
  only:
    - branches

deploy_back:
  image: alpine:latest
  stage: publish
  script:
    - chmod og= $DEPLOYER_ID_RSA_DEV
    - apk update && apk add openssh-client
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker container rm -f back || true"
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker run -d -p 8080:1234 --pull always --name back  ${CI_REGISTRY_IMAGE}/back:$CI_COMMIT_SHORT_SHA"
  only:
    - dev

deploy_front:
  image: alpine:latest
  stage: publish
  script:
    - chmod og= $DEPLOYER_ID_RSA_DEV
    - apk update && apk add openssh-client
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker container rm -f front || true"
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker run -d -p 80:5000 --pull always --name front  ${CI_REGISTRY_IMAGE}/front:$CI_COMMIT_SHORT_SHA"
  only:
    - dev
