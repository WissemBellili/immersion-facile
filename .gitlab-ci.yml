variables:
  SERVER_USER: deployer

stages:
  - install
  - test
  - build
  - deploy
  - publish

image: node:16.5

cache:
  paths:
    - front/node_modules/
    - back/node_modules/

front:
  stage: test
  script:
    - cd front
    - npm ci
    - npm run test
    - npm run build

back:
  stage: test
  script:
    - cd back
    - npm install
    - npm ci
    - npm run test:all
    - npm run typecheck

build_docker_image_back_job:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
     # build de l'image docker contenant l'API et le back end  et push de celles-ci dans le container registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR/back --dockerfile $CI_PROJECT_DIR/back/Dockerfile --destination $CI_REGISTRY_IMAGE
  only:
    - branches

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $DEPLOYER_ID_RSA_DEV
    - apk update && apk add openssh-client
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker container rm -f back || true"
    - ssh -i $DEPLOYER_ID_RSA_DEV -o StrictHostKeyChecking=no $SERVER_USER@$DEPLOYER_SERVER_IP_DEV "docker run -d -p 80:1234 --pull always --name back  $CI_REGISTRY_IMAGE"
